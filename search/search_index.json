{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Ceris Integration Runtime Ceris is an open-source data integration runtime that helps you consolidate your data in your data lake. Ceris provides a comprehensive UI for managing connectors and is based on Kafka Connect\u00a9. Features single jar embedded kafka server, no cluster setup required install 150+ connectors from Confluent Hub\u00a9 Extract & Load data from different sources to sinks Database replication Changed Data Capture CDC Cloud migration Requirements java 17+ or docker","title":"Home"},{"location":"#ceris-integration-runtime","text":"Ceris is an open-source data integration runtime that helps you consolidate your data in your data lake. Ceris provides a comprehensive UI for managing connectors and is based on Kafka Connect\u00a9.","title":"Ceris Integration Runtime"},{"location":"#features","text":"single jar embedded kafka server, no cluster setup required install 150+ connectors from Confluent Hub\u00a9 Extract & Load data from different sources to sinks Database replication Changed Data Capture CDC Cloud migration","title":"Features"},{"location":"#requirements","text":"java 17+ or docker","title":"Requirements"},{"location":"api/","text":"Ceris REST API Authentication Supported authentication methods: Basic auth ( Authorization:Basic <base64> ) Bearer token ( Authorization:Bearer <token> ) Content Types The REST API only supports application/json as both the request and response content type. Open Endpoints Open endpoints require no authentication. Login : POST /auth/login/ Health : GET /health Endpoints that require authentication Closed endpoints require a valid token to be included in the header of the request. A token can be acquired from the login endpoint above. Current User related Information related to the current user whose token is provided with the request: Me : GET /api/connect/me Extension to kafka connect api Additional endpoints to the connect API for viewing and manipulating connectors, plugins, messages List defined secrets : GET /api/connect/secrets List connector topics : GET /api/connect/topics Get topic schema : GET /api/connect/topics/:topic/schema Get topic messages : GET /api/connect/topics/:topic/messages List installed plugins : GET /api/connect/connector-plugins Install new plugin : POST /api/connect/connector-plugins Uninstall plugin : DELETE /api/connect/connector-plugins/:id List installable plugins : GET /api/connect/plugins-store Proxy to kafka connect API : GET|POST|PUT|DELETE /api/connect/* Monitoring endpoints Embedded server status : GET /api/connect/status Connector metrics : GET /api/connect/metrics Connector metrics prometheus : GET /api/connect/prometheus","title":"Api"},{"location":"api/#ceris-rest-api","text":"","title":"Ceris REST API"},{"location":"api/#authentication","text":"Supported authentication methods: Basic auth ( Authorization:Basic <base64> ) Bearer token ( Authorization:Bearer <token> )","title":"Authentication"},{"location":"api/#content-types","text":"The REST API only supports application/json as both the request and response content type.","title":"Content Types"},{"location":"api/#open-endpoints","text":"Open endpoints require no authentication. Login : POST /auth/login/ Health : GET /health","title":"Open Endpoints"},{"location":"api/#endpoints-that-require-authentication","text":"Closed endpoints require a valid token to be included in the header of the request. A token can be acquired from the login endpoint above.","title":"Endpoints that require authentication"},{"location":"api/#current-user-related","text":"Information related to the current user whose token is provided with the request: Me : GET /api/connect/me","title":"Current User related"},{"location":"api/#extension-to-kafka-connect-api","text":"Additional endpoints to the connect API for viewing and manipulating connectors, plugins, messages List defined secrets : GET /api/connect/secrets List connector topics : GET /api/connect/topics Get topic schema : GET /api/connect/topics/:topic/schema Get topic messages : GET /api/connect/topics/:topic/messages List installed plugins : GET /api/connect/connector-plugins Install new plugin : POST /api/connect/connector-plugins Uninstall plugin : DELETE /api/connect/connector-plugins/:id List installable plugins : GET /api/connect/plugins-store Proxy to kafka connect API : GET|POST|PUT|DELETE /api/connect/*","title":"Extension to kafka connect api"},{"location":"api/#monitoring-endpoints","text":"Embedded server status : GET /api/connect/status Connector metrics : GET /api/connect/metrics Connector metrics prometheus : GET /api/connect/prometheus","title":"Monitoring endpoints"},{"location":"configuration/","text":"Configuration Ceris can be configured with: java system properties e.g. -Dcersi.demo=true env variables e.g. CERIS_DEME=true Authentication Ceris users and roles can be defined via the configuration CERIS_AUTH_USERS . The following format is supported: <username>:<password>:<ADMIN|USER>,... ADMIN has read/write access, USER read only access Variable Default Description CERIS_AUTH_ENABLED true Enable authentication / login CERIS_AUTH_USERS admin:admin:ADMIN, user:user:USER Default users and there roles CERIS_AUTH_JWT_SECRET_KEY - Key for sighning JWT tokens CERIS_AUTH_JWT_EXPIRATION PT24H JWT token ttl Embedded Kafka Configuration Variable Default Description CERIS_EMBEDDED_ENABLED true Run ceris with embedded kafka connect CERIS_EMBEDDED_DATA_PATH data (relative to workDir) Path location for persisting data. (kafka log, connect plugins) CERIS_EMBEDDED_PLUGINS_INSTALL comma sep. list of plugins to install at start-up CONNECT_* Kafka connect worker properties e.g. CONNECT_GROUP_ID doc SCHEMA_REGISTRY_* Schema registry propterties KAFKA_* Kafka client propterties used for managing topics CERIS_API_PORT 4567 Ceris API port CERIS_INIT_RESOURCES JSON configuration of connectors created at startup Secrets You can use it to prevent secrets from appearing in cleartext in connector configurations. Secrets are never persisted in connector configs, logs, or in REST API requests and responses. Secrets are defined with the prefix CERIS_SECRET_ and can be referenced in configurations with ${env:CERIS_SECRET_X_Y} Pre-defined secrets Placeholder in configuration Description CERIS_SECRET_KAFKA_BOOTSTRAP_SERVERS ${env:CERIS_SECRET_KAFKA_BOOTSTRAP_SERVERS} Kafka bootstrap server CERIS_SECRET_SCHEMA_REGISTRY_URL ${env:CERIS_SECRET_SCHEMA_REGISTRY_URL} Schema registry url","title":"Configuation"},{"location":"configuration/#configuration","text":"Ceris can be configured with: java system properties e.g. -Dcersi.demo=true env variables e.g. CERIS_DEME=true","title":"Configuration"},{"location":"configuration/#authentication","text":"Ceris users and roles can be defined via the configuration CERIS_AUTH_USERS . The following format is supported: <username>:<password>:<ADMIN|USER>,... ADMIN has read/write access, USER read only access Variable Default Description CERIS_AUTH_ENABLED true Enable authentication / login CERIS_AUTH_USERS admin:admin:ADMIN, user:user:USER Default users and there roles CERIS_AUTH_JWT_SECRET_KEY - Key for sighning JWT tokens CERIS_AUTH_JWT_EXPIRATION PT24H JWT token ttl","title":"Authentication"},{"location":"configuration/#embedded-kafka-configuration","text":"Variable Default Description CERIS_EMBEDDED_ENABLED true Run ceris with embedded kafka connect CERIS_EMBEDDED_DATA_PATH data (relative to workDir) Path location for persisting data. (kafka log, connect plugins) CERIS_EMBEDDED_PLUGINS_INSTALL comma sep. list of plugins to install at start-up CONNECT_* Kafka connect worker properties e.g. CONNECT_GROUP_ID doc SCHEMA_REGISTRY_* Schema registry propterties KAFKA_* Kafka client propterties used for managing topics CERIS_API_PORT 4567 Ceris API port CERIS_INIT_RESOURCES JSON configuration of connectors created at startup","title":"Embedded Kafka Configuration"},{"location":"configuration/#secrets","text":"You can use it to prevent secrets from appearing in cleartext in connector configurations. Secrets are never persisted in connector configs, logs, or in REST API requests and responses. Secrets are defined with the prefix CERIS_SECRET_ and can be referenced in configurations with ${env:CERIS_SECRET_X_Y} Pre-defined secrets Placeholder in configuration Description CERIS_SECRET_KAFKA_BOOTSTRAP_SERVERS ${env:CERIS_SECRET_KAFKA_BOOTSTRAP_SERVERS} Kafka bootstrap server CERIS_SECRET_SCHEMA_REGISTRY_URL ${env:CERIS_SECRET_SCHEMA_REGISTRY_URL} Schema registry url","title":"Secrets"},{"location":"getting-started/","text":"Getting started To see ceris in action start ceris in demo mode, which creates a source connector generating demo data and two sink connectors writing the data to a csv file and log output. Download the latest release Run jar java -jar ceris-x.x.x.jar -Dceris.demo Or run with docker docker run --name ceris -p 4567:4567 -e CERIS_DEMO=true eblaas/ceris Login ceris UI http://localhost:4567 username=admin, password=admin","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"To see ceris in action start ceris in demo mode, which creates a source connector generating demo data and two sink connectors writing the data to a csv file and log output. Download the latest release Run jar java -jar ceris-x.x.x.jar -Dceris.demo Or run with docker docker run --name ceris -p 4567:4567 -e CERIS_DEMO=true eblaas/ceris Login ceris UI http://localhost:4567 username=admin, password=admin","title":"Getting started"}]}